// schema.prisma
generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// Enums
enum TipoPessoa {
  FISICA
  JURIDICA
}

enum StatusCliente {
  ATIVO
  INATIVO
  BLOQUEADO
  INADIMPLENTE
}

enum StatusTenant {
  ATIVO
  INATIVO
  PENDENTE_CONFIGURACAO
  BLOQUEADO_PAGAMENTO
  GRAUITO
}

enum FormaPagamento {
  CARTAO_CREDITO
  CARTAO_DEBITO
  BOLETO
  PIX
  TRANSFERENCIA
}

enum StatusPagamento {
  PAGO
  PENDENTE
  CANCELADO
  FALHA
  REEMBOLSADO
}

enum TipoPlano {
  PLANO_GRATUITO
  PLANO_INICIANTE
  PLANO_ESSENCIAL
  PLANO_EMPRESARIAL
  PLANO_PREMIUM
}

enum StatusNotaFiscal {
  EMITIDA
  CANCELADA
  PENDENTE
}

enum Status {
  ATIVO
  INATIVO
}

// Modelos
model Cliente {
  id                String         @id @default(uuid())
  nome              String
  email             String         @unique
  telefone          String
  tipoPessoa        TipoPessoa
  cpfCnpj           String         @unique
  status            StatusCliente  @default(ATIVO)
  dataCadastro      DateTime       @default(now())
  dataAtualizacao   DateTime       @updatedAt
  ultimoAcesso      DateTime?

  // Campos específicos para pessoa jurídica
  razaoSocial       String?
  inscricaoEstadual String?
  nomeResponsavel   String?
  emailResponsavel  String?
  telefResponsavel  String?

  // Relacionamentos
  enderecos         Endereco[]
  pagamentos        Pagamento[]
  tenant            Tenant?
  clientePlano      ClientePlano[]

  @@map("clientes")
}

model Endereco {
  id              String   @id @default(uuid())
  clienteId       String
  logradouro      String
  numero          String
  complemento     String?
  bairro          String
  cidade          String
  estado          String
  cep             String
  isPrincipal     Boolean  @default(false)
  dataCadastro    DateTime @default(now())
  dataAtualizacao DateTime @updatedAt

  // Relacionamentos
  cliente         Cliente  @relation(fields: [clienteId], references: [id], onDelete: Cascade)

  @@map("enderecos")
}

model Plano {
  id                 String         @id @default(uuid())
  nome               String
  tipo               TipoPlano
  descricao          String?
  limiteProjetos     Int
  limiteBeneficiarios Int
  modulosIncluidos   Json           // Array de strings ["Atendimento", "Cadastro", etc]
  valorMensal        Decimal        @db.Decimal(10, 2)
  valorAnual         Decimal?       @db.Decimal(10, 2)
  status             Status         @default(ATIVO)
  dataCadastro       DateTime       @default(now())
  dataAtualizacao    DateTime       @updatedAt

  // Relacionamentos
  clientePlanos      ClientePlano[]
  historicosPlanos   HistoricoPlano[]

  @@map("planos")
}

model ClientePlano {
  id                String         @id @default(uuid())
  clienteId         String
  planoId           String
  dataInicio        DateTime       @default(now())
  dataFim           DateTime?
  status            Status        @default(ATIVO)
  valorContratado   Decimal        @db.Decimal(10, 2)
  cicloCobranca     String         // "MENSAL" ou "ANUAL"
  dataCadastro      DateTime       @default(now())
  dataAtualizacao   DateTime       @updatedAt
  
  // Relacionamentos
  cliente           Cliente        @relation(fields: [clienteId], references: [id], onDelete: Cascade)
  plano             Plano          @relation(fields: [planoId], references: [id])
  pagamentos        Pagamento[]
  tenant            Tenant?

  @@map("cliente_planos")
}

model HistoricoPlano {
  id                String         @id @default(uuid())
  clienteId         String
  planoId           String
  planoAnteriorId   String?
  tipoMudanca       String         // "UPGRADE", "DOWNGRADE", "NOVO", "CANCELAMENTO"
  observacao        String?
  dataMudanca       DateTime       @default(now())
  usuarioResponsavel String        // ID ou nome do usuário que fez a mudança

  // Relacionamentos
  plano             Plano          @relation(fields: [planoId], references: [id])

  @@map("historicos_planos")
}

model Pagamento {
  id                String          @id @default(uuid())
  clienteId         String
  clientePlanoId    String
  valor             Decimal         @db.Decimal(10, 2)
  formaPagamento    FormaPagamento
  status            StatusPagamento @default(PENDENTE)
  dataVencimento    DateTime
  dataPagamento     DateTime?
  proximoVencimento DateTime?
  transacaoId       String?         // ID de transação do gateway de pagamento
  dataCadastro      DateTime        @default(now())
  dataAtualizacao   DateTime        @updatedAt
  
  // Relacionamentos
  cliente           Cliente         @relation(fields: [clienteId], references: [id], onDelete: Cascade)
  clientePlano      ClientePlano    @relation(fields: [clientePlanoId], references: [id], onDelete: Cascade)
  notasFiscais      NotaFiscal[]
  alertasEnviados   AlertaPagamento[]

  @@map("pagamentos")
}

model NotaFiscal {
  id                String           @id @default(uuid())
  pagamentoId       String
  numero            String           @unique
  serie             String
  chaveAcesso       String?
  dataEmissao       DateTime         @default(now())
  valor             Decimal          @db.Decimal(10, 2)
  status            StatusNotaFiscal @default(PENDENTE)
  xmlUrl            String?
  pdfUrl            String?
  dataCadastro      DateTime         @default(now())
  dataAtualizacao   DateTime         @updatedAt
  
  // Relacionamentos
  pagamento         Pagamento        @relation(fields: [pagamentoId], references: [id], onDelete: Cascade)

  @@map("notas_fiscais")
}

model AlertaPagamento {
  id                String           @id @default(uuid())
  pagamentoId       String
  tipoAlerta        String           // "15_DIAS", "7_DIAS", "3_DIAS", "VENCIDO", "BLOQUEIO_IMINENTE"
  dataEnvio         DateTime         @default(now())
  mensagem          String
  enviado           Boolean          @default(false)
  
  // Relacionamentos
  pagamento         Pagamento        @relation(fields: [pagamentoId], references: [id], onDelete: Cascade)

  @@map("alertas_pagamento")
}

// Modelo para auditoria de ações administrativas
model LogAdministrativo {
  id                String        @id @default(uuid())
  usuarioId         String        // ID do administrador que realizou a ação
  acao              String        // Ex: "ALTERAR_PLANO", "BLOQUEAR_TENANT", etc.
  entidade          String        // Ex: "TENANT", "CLIENTE", "PAGAMENTO"
  entidadeId        String        // ID da entidade afetada
  detalhes          Json          // Detalhes da alteração
  dataAcao          DateTime      @default(now())
  ip                String?

  @@map("logs_administrativos")
}



//tenant

model Tenant {
  id                     String        @id @default(uuid())
  clienteId              String        @unique
  clientePlanoId         String        @unique
  subdominio             String        @unique
  status                 StatusTenant  @default(PENDENTE_CONFIGURACAO)
  dataConfiguracao       DateTime?
  dataUltimoAcesso       DateTime?
  dataVencimentoAtual    DateTime?
  dataBloqueioAcesso     DateTime?
  bloqueioTotal          Boolean       @default(false)
  dataCadastro           DateTime      @default(now())
  dataAtualizacao        DateTime      @updatedAt
  
  // Relacionamentos
  cliente                Cliente       @relation(fields: [clienteId], references: [id], onDelete: Cascade)
  clientePlano           ClientePlano  @relation(fields: [clientePlanoId], references: [id], onDelete: Cascade)
  configuracoes          TenantConfiguracao?

  @@map("tenants")
}

model TenantConfiguracao {
  id                     String        @id @default(uuid())
  tenantId               String        @unique
  logoUrl                String?
  corPrimaria            String?       // Formato hex: #RRGGBB
  corSecundaria          String?
  emailContato           String?
  telefoneContato        String?
  modulosAtivos          Json          // Array de strings com módulos ativos
  dataCadastro           DateTime      @default(now())
  dataAtualizacao        DateTime      @updatedAt
  
  // Relacionamentos
  tenant                 Tenant        @relation(fields: [tenantId], references: [id], onDelete: Cascade)

  @@map("tenant_configuracoes")
}