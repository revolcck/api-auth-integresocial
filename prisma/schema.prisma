// This is your Prisma schema file
// Configuração do Prisma com MySQL

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

// Modelo de usuário
model User {
  id             String    @id @default(uuid())
  email          String    @unique
  name           String
  password       String
  role           Role      @default(USER)
  refreshToken   String?   @db.Text
  createdAt      DateTime  @default(now())
  updatedAt      DateTime  @updatedAt
  
  // Relacionamentos
  enrollments    Enrollment[]
  jobs           Job[]     @relation("JobCreator")
  applications   JobApplication[]

  @@map("users")
}

// Enum para definir os papéis de usuário
enum Role {
  ADMIN
  INSTRUCTOR
  USER
}

// Modelo de curso
model Course {
  id          String    @id @default(uuid())
  title       String
  description String    @db.Text
  imageUrl    String?
  price       Float
  duration    Int       // Em horas
  isActive    Boolean   @default(true)
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
  
  // Relacionamentos
  enrollments Enrollment[]

  @@map("courses")
}

// Modelo de matricula em curso
model Enrollment {
  id        String    @id @default(uuid())
  userId    String
  courseId  String
  status    EnrollmentStatus @default(ACTIVE)
  progress  Float     @default(0)
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  
  // Relacionamentos
  user      User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  course    Course    @relation(fields: [courseId], references: [id], onDelete: Cascade)

  @@unique([userId, courseId])
  @@map("enrollments")
}

// Enum para definir o status da matrícula
enum EnrollmentStatus {
  ACTIVE
  COMPLETED
  CANCELLED
}

// Modelo de vaga de emprego
model Job {
  id              String    @id @default(uuid())
  title           String
  company         String
  location        String
  description     String    @db.Text
  requirements    String    @db.Text
  salary          Float?
  contactEmail    String
  isRemote        Boolean   @default(false)
  isActive        Boolean   @default(true)
  createdById     String
  createdAt       DateTime  @default(now())
  updatedAt       DateTime  @updatedAt
  expiresAt       DateTime?
  
  // Relacionamentos
  createdBy       User      @relation("JobCreator", fields: [createdById], references: [id])
  applications    JobApplication[]

  @@map("jobs")
}

// Modelo de candidatura a vaga
model JobApplication {
  id          String    @id @default(uuid())
  userId      String
  jobId       String
  resumeUrl   String?
  coverLetter String?   @db.Text
  status      ApplicationStatus @default(PENDING)
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
  
  // Relacionamentos
  user        User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  job         Job       @relation(fields: [jobId], references: [id], onDelete: Cascade)

  @@unique([userId, jobId])
  @@map("job_applications")
}

// Enum para definir o status da candidatura
enum ApplicationStatus {
  PENDING
  REVIEWING
  ACCEPTED
  REJECTED
}